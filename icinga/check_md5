#!/bin/bash

# Exit codes      
STATE_OK=0        
STATE_WARNING=1   
STATE_CRITICAL=2  
STATE_UNKNOWN=3   

MD5=`which md5sum`

function print_help() 
{
  printf "Monitor the MD5 checksum of file\n"
  /bin/cat <<EOT

  Options:  
  -h
    Print detailed help screen

  -f /path/to/file                                   
    Set which file to monitor                       
                                                   
  -md5file                           
    File MD5 checksum for the file set by
EOT
} 

function check_file_md5() {
  if [ -f $file ]; then
    if [ `grep $file $MD5_LIST | wc -l` -eq 1 ]; then
      if [ `grep $file $MD5_LIST | cut -d\  -f1` = `$MD5 $file | cut -d\  -f1` ]; then 
        echo OK 
        exit 0
      else
        new=`$MD5 $file | cut -d\  -f1`
        echo "CRITICAL - md5sum $new does not match with old md5, update file!"
        exit $STATE_CRITICAL
      fi
    else
      echo "WARNING - md5sum is not in list. Adding for you now."
      echo `$MD5 $file` >> $MD5_LIST
      exit 1
    fi
  else
    echo "CRITICAL - $file does not exist!"
    exit 2
  fi
}

function rebuild_md5_list() {
  MD5_DATE=${MD5_LIST}.`date +%Y%m%d`
  mv $MD5_LIST $MD5_DATE 
  
  for FILE in `cat $MD5_DATE | awk '{ print $2 }' | sort | uniq | xargs`; do
    md5sum ${FILE} >> $MD5_LIST 
  done
}

while [[ -n "$1" ]]; do                                               
   case "$1" in                                                       
                                                                      
       -h | --help)                                                   
           print_help                                                 
           exit $STATE_OK                                             
           ;;                                                                                                                  
                                                                      
       -f)                                                            
     if [[ -z "$2" ]]; then                                           
    printf "\nOption $1 requires an argument\n | Option $1 requires an
argument"                                                             
    print_help                                                        
    exit $STATE_UNKNOWN                                               
     fi                                                               
    file=$2                                                        
          shift 2                                                    
          ;;                                                         
                                                                      
       -md5file)                                                          
           if [[ -z "$2" ]]; then                                     
                printf "\nOption $1 requires an argument\n | Option $1 requires an argument"                                                 
    print_help                                                        
    exit $STATE_UNKNOWN             
      fi                                                         
    MD5_LIST=$2
    check_file_md5
    #check_file_md5
           shift 2                                                    
           ;;                                                         
                                                                      
  *)                                                                  
           printf "\nInvalid option $1 | Invalid option $1"           
           print_help                                                 
           exit $STATE_UNKNOWN                                        
           ;;                                                         
   esac
done                                                               
